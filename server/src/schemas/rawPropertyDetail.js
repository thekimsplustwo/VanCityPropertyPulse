import mongoose from 'mongoose';
import { BaseSchema } from './BaseSchema.js';

const { Schema } = mongoose;

const listingProviderSchema = new BaseSchema(
  {
    enhancedVideoURL: BaseSchema.Types.Mixed,
    showNoContactInfoMessage: Boolean,
    postingGroupName: String,
    isZRMSourceText: String,
    showLogos: BaseSchema.Types.Mixed,
    logos: BaseSchema.Types.Mixed,
    sourceText: String,
    title: String,
    disclaimerText: String,
    postingWebsiteURL: String,
    agentLicenseNumber: Number,
    postingWebsiteLinkText: String,
    enhancedDescriptionText: String,
    agentName: String,
  },
  { _id: false }
);
const addressSchema = new BaseSchema(
  {
    city: String,
    state: String,
    streetAddress: String,
    zipcode: String,
  },
  { _id: false }
);

const atAGlanceFactsSchema = new BaseSchema(
  {
    factValue: {
      type: String,
    },
    factLabel: {
      type: String,
    },
  },
  { _id: false }
);

const resoFactsSchema = new BaseSchema(
  {
    hasAttachedProperty: Boolean,
    frontageType: Schema.Types.Mixed,
    poolFeatures: Schema.Types.Mixed,
    flooring: Object,
    builderModel: Schema.Types.Mixed,
    accessibilityFeatures: Schema.Types.Mixed,
    hasGarage: Boolean,
    hasPetsAllowed: Boolean,
    bodyType: Schema.Types.Mixed,
    hasAssociation: Boolean,
    topography: Schema.Types.Mixed,
    landLeaseExpirationDate: Date,
    hasAdditionalParcels: Boolean,
    waterViewYN: Boolean,
    livingQuarters: Object,
    totalActualRent: Schema.Types.Mixed,
    offerReviewDate: Date,
    horseYN: Boolean,
    view: Schema.Types.Mixed,
    buyerAgencyCompensationType: Schema.Types.Mixed,
    rooms: Object,
    belowGradeFinishedArea: Schema.Types.Mixed,
    feesAndDues: Object,
    cityRegion: Schema.Types.Mixed,
    mainLevelBathrooms: Schema.Types.Mixed,
    hasPrivatePool: Boolean,
    associationFeeIncludes: Schema.Types.Mixed,
    waterSource: Schema.Types.Mixed,
    carportParkingCapacity: Schema.Types.Mixed,
    inclusions: Schema.Types.Mixed,
    hasFireplace: Boolean,
    gas: Schema.Types.Mixed,
    sewer: Schema.Types.Mixed,
    elevationUnits: Schema.Types.Mixed,
    roadSurfaceType: Schema.Types.Mixed,
    subdivisionName: Schema.Types.Mixed,
    numberOfUnitsVacant: Schema.Types.Mixed,
    hasWaterfrontView: Boolean,
    bathroomsOneQuarter: Schema.Types.Mixed,
    lotSize: Schema.Types.Mixed,
    entryLevel: Schema.Types.Mixed,
    irrigationWaterRightsAcres: Schema.Types.Mixed,
    greenWaterConservation: Schema.Types.Mixed,
    stories: Schema.Types.Mixed,
    bathrooms: Schema.Types.Mixed,
    numberOfUnitsInCommunity: Schema.Types.Mixed,
    listingTerms: Schema.Types.Mixed,
    otherParking: Schema.Types.Mixed,
    greenIndoorAirQuality: Schema.Types.Mixed,
    marketingType: Schema.Types.Mixed,
    greenSustainability: Schema.Types.Mixed,
    heating: Object,
    associationPhone: Schema.Types.Mixed,
    greenBuildingVerificationType: Schema.Types.Mixed,
    hasAttachedGarage: Boolean,
    bedrooms: Schema.Types.Mixed,
    architecturalStyle: Schema.Types.Mixed,
    listingId: Schema.Types.Mixed,
    structureType: Schema.Types.Mixed,
    interiorFeatures: Schema.Types.Mixed,
    associationFee: Schema.Types.Mixed,
    horseAmenities: Schema.Types.Mixed,
    electric: Schema.Types.Mixed,
    otherFacts: Object,
    lotFeatures: Schema.Types.Mixed,
    roofType: Schema.Types.Mixed,
    constructionMaterials: Object,
    fireplaceFeatures: Schema.Types.Mixed,
    hoaFeeTotal: Schema.Types.Mixed,
    doorFeatures: Schema.Types.Mixed,
    bathroomsPartial: Schema.Types.Mixed,
    bathroomsHalf: Schema.Types.Mixed,
    daysOnZillow: Schema.Types.Mixed,
    buildingName: Schema.Types.Mixed,
    listAOR: Schema.Types.Mixed,
    attic: Schema.Types.Mixed,
    mainLevelBedrooms: Schema.Types.Mixed,
    elementarySchool: Schema.Types.Mixed,
    virtualTour: Schema.Types.Mixed,
    hasCarport: Boolean,
    canRaiseHorses: Boolean,
    hasLandLease: Boolean,
    communityFeatures: Object,
    yearBuiltEffective: Date,
    middleOrJuniorSchool: Schema.Types.Mixed,
    lotSizeDimensions: Schema.Types.Mixed,
    hasHomeWarranty: Boolean,
    propertySubType: Schema.Types.Mixed,
    entryLocation: Schema.Types.Mixed,
    propertyCondition: Schema.Types.Mixed,
    utilities: Schema.Types.Mixed,
    parcelNumber: Schema.Types.Mixed,
    incomeIncludes: Schema.Types.Mixed,
    highSchool: Schema.Types.Mixed,
    isNewConstruction: Boolean,
    otherStructures: Schema.Types.Mixed,
    livingArea: Schema.Types.Mixed,
    livingAreaRangeUnits: Schema.Types.Mixed,
    buildingArea: Schema.Types.Mixed,
    windowFeatures: Schema.Types.Mixed,
    ownership: Schema.Types.Mixed,
    woodedArea: Schema.Types.Mixed,
    yearBuilt: Schema.Types.Mixed,
    middleOrJuniorSchoolDistrict: Schema.Types.Mixed,
    associationPhone2: Schema.Types.Mixed,
    isSeniorCommunity: Boolean,
    foundationDetails: Object,
    frontageLength: Schema.Types.Mixed,
    exteriorFeatures: Object,
    associationAmenities: Schema.Types.Mixed,
    buildingFeatures: Schema.Types.Mixed,
    hasCooling: Boolean,
    buildingAreaSource: Schema.Types.Mixed,
    parkingFeatures: Object,
    foundationArea: Schema.Types.Mixed,
    zoning: Schema.Types.Mixed,
    hoaFee: Schema.Types.Mixed,
    livingAreaRange: Schema.Types.Mixed,
    bathroomsFull: Schema.Types.Mixed,
    additionalParcelsDescription: Schema.Types.Mixed,
    waterBodyName: Schema.Types.Mixed,
    waterfrontFeatures: Schema.Types.Mixed,
    aboveGradeFinishedArea: Schema.Types.Mixed,
    zoningDescription: Schema.Types.Mixed,
    levels: Schema.Types.Mixed,
    basementYN: Boolean,
    hasView: Boolean,
    appliances: Object,
    securityFeatures: Schema.Types.Mixed,
    elevation: Schema.Types.Mixed,
    fencing: Schema.Types.Mixed,
    greenEnergyEfficient: Schema.Types.Mixed,
    developmentStatus: Schema.Types.Mixed,
    ownershipType: Schema.Types.Mixed,
    garageParkingCapacity: Schema.Types.Mixed,
    associations: Object,
    waterView: Schema.Types.Mixed,
    laundryFeatures: Schema.Types.Mixed,
    buyerAgencyCompensation: Schema.Types.Mixed,
    basement: Schema.Types.Mixed,
    additionalFeeInfo: Schema.Types.Mixed,
    commonWalls: Schema.Types.Mixed,
    homeType: Schema.Types.Mixed,
    spaFeatures: Schema.Types.Mixed,
    municipality: Schema.Types.Mixed,
    bathroomsThreeQuarter: Schema.Types.Mixed,
    hasSpa: Boolean,
    hasHeating: Boolean,
    associationFee2: Schema.Types.Mixed,
    cooling: Object,
    openParkingCapacity: Schema.Types.Mixed,
    associationName2: Schema.Types.Mixed,
    hasRentControl: Boolean,
    elementarySchoolDistrict: Schema.Types.Mixed,
    otherEquipment: Schema.Types.Mixed,
    associationName: Schema.Types.Mixed,
    specialListingConditions: Schema.Types.Mixed,
    furnished: Boolean,
    vegetation: Schema.Types.Mixed,
    patioAndPorchFeatures: Schema.Types.Mixed,
    bathroomsFloat: Schema.Types.Mixed,
    builderName: Schema.Types.Mixed,
    highSchoolDistrict: Schema.Types.Mixed,
    exclusions: Schema.Types.Mixed,
    storiesTotal: Schema.Types.Mixed,
    landLeaseAmount: Schema.Types.Mixed,
    fireplaces: Schema.Types.Mixed,
    availabilityDate: Date,
    cropsIncludedYN: Boolean,
    coveredParkingCapacity: Schema.Types.Mixed,
    irrigationWaterRightsYN: Boolean,
    hasOpenParking: Boolean,
    onMarketDate: Date,
    hasElectricOnProperty: Boolean,
    parkingCapacity: Schema.Types.Mixed,
    pricePerSquareFoot: Schema.Types.Mixed,
    atAGlanceFacts: {
      type: [atAGlanceFactsSchema],
    },
  },
  { _id: false }
);
const resoFactsSchemaOrg = new BaseSchema(
  {
    hasAttachedProperty: Boolean,
    frontageType: String,
    poolFeatures: String,
    flooring: Object,
    builderModel: String,
    accessibilityFeatures: String,
    hasGarage: Boolean,
    hasPetsAllowed: Boolean,
    bodyType: String,
    hasAssociation: Boolean,
    topography: String,
    landLeaseExpirationDate: Date,
    hasAdditionalParcels: Boolean,
    waterViewYN: Boolean,
    livingQuarters: Object,
    totalActualRent: Number,
    offerReviewDate: Date,
    horseYN: Boolean,
    view: Schema.Types.Mixed,
    buyerAgencyCompensationType: String,
    rooms: Object,
    belowGradeFinishedArea: String,
    feesAndDues: Object,
    cityRegion: String,
    mainLevelBathrooms: Number,
    hasPrivatePool: Boolean,
    associationFeeIncludes: String,
    waterSource: String,
    carportParkingCapacity: Number,
    inclusions: String,
    hasFireplace: Boolean,
    gas: String,
    sewer: String,
    elevationUnits: String,
    roadSurfaceType: String,
    subdivisionName: String,
    numberOfUnitsVacant: Number,
    hasWaterfrontView: Boolean,
    bathroomsOneQuarter: Number,
    lotSize: String,
    entryLevel: String,
    irrigationWaterRightsAcres: Number,
    greenWaterConservation: String,
    stories: Number,
    bathrooms: Number,
    numberOfUnitsInCommunity: Number,
    listingTerms: String,
    otherParking: String,
    greenIndoorAirQuality: String,
    marketingType: String,
    greenSustainability: String,
    heating: Object,
    associationPhone: String,
    greenBuildingVerificationType: String,
    hasAttachedGarage: Boolean,
    bedrooms: Number,
    architecturalStyle: String,
    listingId: String,
    structureType: String,
    interiorFeatures: Schema.Types.Mixed,
    associationFee: Schema.Types.Mixed,
    horseAmenities: String,
    electric: String,
    otherFacts: Object,
    lotFeatures: String,
    roofType: String,
    constructionMaterials: Object,
    fireplaceFeatures: String,
    hoaFeeTotal: Schema.Types.Mixed,
    doorFeatures: String,
    bathroomsPartial: Number,
    bathroomsHalf: Number,
    daysOnZillow: Number,
    buildingName: String,
    listAOR: String,
    attic: String,
    mainLevelBedrooms: Number,
    elementarySchool: String,
    virtualTour: String,
    hasCarport: Boolean,
    canRaiseHorses: Boolean,
    hasLandLease: Boolean,
    communityFeatures: Object,
    yearBuiltEffective: Date,
    middleOrJuniorSchool: String,
    lotSizeDimensions: String,
    hasHomeWarranty: Boolean,
    propertySubType: Schema.Types.Mixed,
    entryLocation: String,
    propertyCondition: String,
    utilities: String,
    parcelNumber: String,
    incomeIncludes: String,
    highSchool: String,
    isNewConstruction: Boolean,
    otherStructures: Schema.Types.Mixed,
    livingArea: String,
    livingAreaRangeUnits: String,
    buildingArea: String,
    windowFeatures: String,
    ownership: String,
    woodedArea: String,
    yearBuilt: Number,
    middleOrJuniorSchoolDistrict: String,
    associationPhone2: String,
    isSeniorCommunity: Boolean,
    foundationDetails: Object,
    frontageLength: String,
    exteriorFeatures: Object,
    associationAmenities: String,
    buildingFeatures: String,
    hasCooling: Boolean,
    buildingAreaSource: String,
    parkingFeatures: Object,
    foundationArea: String,
    zoning: String,
    hoaFee: Schema.Types.Mixed,
    livingAreaRange: String,
    bathroomsFull: Number,
    additionalParcelsDescription: String,
    waterBodyName: String,
    waterfrontFeatures: String,
    aboveGradeFinishedArea: String,
    zoningDescription: String,
    levels: String,
    basementYN: Boolean,
    hasView: Boolean,
    appliances: Object,
    securityFeatures: String,
    elevation: Number,
    fencing: String,
    greenEnergyEfficient: String,
    developmentStatus: String,
    ownershipType: String,
    garageParkingCapacity: Number,
    associations: Object,
    waterView: String,
    laundryFeatures: Schema.Types.Mixed,
    buyerAgencyCompensation: String,
    basement: String,
    additionalFeeInfo: String,
    commonWalls: String,
    homeType: String,
    spaFeatures: Schema.Types.Mixed,
    municipality: String,
    bathroomsThreeQuarter: Number,
    hasSpa: Boolean,
    hasHeating: Boolean,
    associationFee2: Number,
    cooling: Object,
    openParkingCapacity: Number,
    associationName2: String,
    hasRentControl: Boolean,
    elementarySchoolDistrict: String,
    otherEquipment: String,
    associationName: String,
    specialListingConditions: String,
    furnished: Boolean,
    vegetation: String,
    patioAndPorchFeatures: String,
    bathroomsFloat: Number,
    builderName: String,
    highSchoolDistrict: String,
    exclusions: String,
    storiesTotal: Number,
    landLeaseAmount: Number,
    fireplaces: Number,
    availabilityDate: Date,
    cropsIncludedYN: Boolean,
    coveredParkingCapacity: Number,
    irrigationWaterRightsYN: Boolean,
    hasOpenParking: Boolean,
    onMarketDate: Date,
    hasElectricOnProperty: Boolean,
    parkingCapacity: Number,
    pricePerSquareFoot: Number,
    atAGlanceFacts: {
      type: [atAGlanceFactsSchema],
    },
  },
  { _id: false }
);

const taxHistorySchema = new BaseSchema(
  {
    time: Number,
    valueIncreaseRate: Number,
    taxIncreaseRate: Number,
    taxPaid: Number,
    value: Number,
  },
  { _id: false }
);

const listingSubTypeSchema = new BaseSchema(
  {
    is_FSBA: Boolean,
    is_comingSoon: Boolean,
    is_newHome: Boolean,
    is_pending: Boolean,
    is_FSBO: Boolean,
  },
  { _id: false }
);

const miniCardPhotosSchema = new BaseSchema(
  {
    url: {
      type: String,
    },
  },
  { _id: false }
);

const nearbyHomesSchema = new BaseSchema(
  {
    miniCardPhotos: {
      type: [miniCardPhotosSchema],
      default: [],
    },
    zpid: {
      type: Number,
      required: true,
    },
    longitude: {
      type: Number,
      required: true,
    },
    address: addressSchema,
    price: {
      type: Number,
      required: true,
    },
    homeType: {
      type: String,
      enum: [
        'SINGLE_FAMILY',
        'CONDO',
        'TOWNHOUSE',
        'MULTI_FAMILY',
        'LAND',
        'APARTMENTS',
        'CONDOS',
        'HOUSES',
        'Multi-family',
        'TOWNHOMES',
        'OTHER',
      ],
      required: true,
    },
    homeStatus: {
      type: String,
      enum: ['FOR_SALE', 'SOLD', 'OTHER', 'FOR_RENT'],
      required: true,
    },
    currency: {
      type: String,
      required: true,
    },
    latitude: {
      type: Number,
      required: true,
    },
  },
  { _id: false }
);

const priceHistorySchema = new BaseSchema(
  {
    priceChangeRate: Number,
    date: Date,
    source: String,
    postingIsRental: Boolean,
    time: Number,
    sellerAgent: String,
    showCountyLink: Boolean,
    attributeSource: {
      infoString1: String,
      infoString2: String,
      infoString3: String,
    },
    pricePerSquareFoot: Number,
    buyerAgent: String,
    event: String,
    price: Number,
  },
  { _id: false }
);

const schoolSchema = new BaseSchema(
  {
    link: String,
    rating: Number,
    totalCount: Number,
    distance: Number,
    assigned: Boolean,
    name: String,
    studentsPerTeacher: Number,
    isAssigned: Boolean,
    size: Number,
    level: String,
    grades: String,
    type: String,
  },
  { _id: false }
);

const rawPropertyDetailSchema = new BaseSchema(
  {
    listingProvider: listingProviderSchema,
    zpid: {
      type: Number,
      required: true,
      unique: true,
    },
    zipcode: {
      type: String,
    },
    cityId: {
      type: String,
    },
    timeOnZillow: {
      type: String,
    },
    imgSrc: {
      type: String,
      required: false,
    },
    address: {
      type: addressSchema,
      required: true,
    },
    price: {
      type: Number,
      required: true,
    },
    bedrooms: {
      type: Number,
      required: false,
    },
    bathrooms: {
      type: Number,
      required: false,
    },
    livingArea: {
      type: Number,
      required: false,
    },
    propertyType: {
      type: String,
      required: false,
    },
    listingStatus: {
      type: String,
      required: false,
    },
    unit: {
      type: String,
      required: false,
    },
    longitude: {
      type: Number,
      required: false,
    },
    latitude: {
      type: Number,
      required: false,
    },
    url: {
      type: String,
    },
    livingAreaValue: {
      type: Number,
    },
    resoFacts: resoFactsSchema,
    taxHistory: [taxHistorySchema],
    brokerId: String,
    stateId: Number,
    streetAddress: String,
    listingSubType: listingSubTypeSchema,
    monthlyHoaFee: {
      type: Number,
    },
    homeStatus: {
      type: String,
    },
    homeFacts: {
      type: String,
    },
    datePosted: {
      type: String,
    },
    nearbyHomes: nearbyHomesSchema,
    priceHistory: [priceHistorySchema],
    favoriteCount: Number,
    schools: [schoolSchema],
    zestimateHighPercent: Number,
    mlsid: String,
    countyFIPS: String,
    city: {
      type: String,
      required: true,
    },
    providerListingID: String,
    country: {
      type: String,
      required: true,
    },
    currency: {
      type: String,
      required: true,
    },
    isListedByOwner: Boolean,
    contingentListingType: String,
  },
  { timestamps: true, strict: false }
);

const RawPropertyDetail =
  mongoose.model.RawPropertyDetail ||
  mongoose.model(
    'rawPropertyDetail',
    rawPropertyDetailSchema,
    'rawPropertyDetails'
  );

export default RawPropertyDetail;
